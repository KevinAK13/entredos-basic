{"version":3,"file":"react-use-typing-effect.cjs.production.min.js","sources":["../src/index.tsx","../src/useInterval.tsx"],"sourcesContent":["import React from 'react';\nimport useInterval from './useInterval';\n\nexport interface Props {\n  over: string | string[];\n  charSpeed?: number;\n  loop?: boolean;\n  delayEnd?: number;\n}\n\nfunction useTypingEffect({\n  over,\n  charSpeed = 100,\n  loop = true,\n  delayEnd = 500,\n}: Props): string {\n  const savedMessage = React.useRef<string[]>(['']);\n  const inWordIndex = React.useRef<number>(0);\n  const inArrayIndex = React.useRef<number>(0);\n\n  React.useEffect(() => {\n    if (typeof over === 'string') {\n      savedMessage.current = [over];\n    } else if (Array.isArray(over)) {\n      savedMessage.current = over.map(el => el.toString());\n    }\n  }, [over]);\n  if (typeof over === 'string') {\n  }\n\n  const [display, setDisplay] = React.useState<string>(\n    savedMessage.current\n      ? savedMessage.current[inArrayIndex.current][inWordIndex.current]\n      : ''\n  );\n\n  //Go to next\n  useInterval(() => {\n    if (\n      inWordIndex.current <=\n      savedMessage.current[inArrayIndex.current].length + delayEnd / charSpeed\n    ) {\n      inWordIndex.current = inWordIndex.current + 1;\n      setDisplay(\n        savedMessage.current[inArrayIndex.current].slice(0, inWordIndex.current)\n      );\n    } else {\n      //Current word is finished\n      if (inArrayIndex.current < savedMessage.current.length - 1) {\n        inArrayIndex.current = inArrayIndex.current + 1;\n      } else if (loop) {\n        inArrayIndex.current = 0;\n      }\n      inWordIndex.current = 0;\n    }\n  }, charSpeed);\n\n  return display;\n}\n\nexport default useTypingEffect;\n","import React, { useRef } from 'react';\n\nfunction useInterval(callback: () => void, delay: number | null) {\n  const savedCallback = useRef<() => void | undefined>();\n\n  // Remember the latest callback.\n  React.useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  React.useEffect(() => {\n    function tick() {\n      if (typeof savedCallback.current === 'function') {\n        savedCallback.current();\n      }\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;\n"],"names":["over","charSpeed","loop","delayEnd","savedMessage","React","useRef","inWordIndex","inArrayIndex","useEffect","current","Array","isArray","map","el","toString","callback","delay","savedCallback","useState","display","setDisplay","length","slice","id","setInterval","clearInterval"],"mappings":"oKAUA,gBACEA,IAAAA,SACAC,UAAAA,aAAY,UACZC,KAAAA,oBACAC,SAAAA,aAAW,MAELC,EAAeC,EAAMC,OAAiB,CAAC,KACvCC,EAAcF,EAAMC,OAAe,GACnCE,EAAeH,EAAMC,OAAe,GAE1CD,EAAMI,WAAU,WACM,iBAATT,EACTI,EAAaM,QAAU,CAACV,GACfW,MAAMC,QAAQZ,KACvBI,EAAaM,QAAUV,EAAKa,KAAI,SAAAC,UAAMA,EAAGC,iBAE1C,CAACf,QCxBegB,EAAsBC,EACnCC,ID2BwBb,EAAMc,SAClCf,EAAaM,QACTN,EAAaM,QAAQF,EAAaE,SAASH,EAAYG,SACvD,IAHCU,OAASC,cC5BGL,EDmCP,WAERT,EAAYG,SACZN,EAAaM,QAAQF,EAAaE,SAASY,OAASnB,EAAWF,GAE/DM,EAAYG,QAAUH,EAAYG,QAAU,EAC5CW,EACEjB,EAAaM,QAAQF,EAAaE,SAASa,MAAM,EAAGhB,EAAYG,YAI9DF,EAAaE,QAAUN,EAAaM,QAAQY,OAAS,EACvDd,EAAaE,QAAUF,EAAaE,QAAU,EACrCR,IACTM,EAAaE,QAAU,GAEzBH,EAAYG,QAAU,ICnDeO,EDqDtChB,ECpDGiB,EAAgBZ,WAGtBD,EAAMI,WAAU,WACdS,EAAcR,QAAUM,IACvB,CAACA,IAGJX,EAAMI,WAAU,cAMA,OAAVQ,EAAgB,KACdO,EAAKC,wBAL4B,mBAA1BP,EAAcR,SACvBQ,EAAcR,YAIWO,UACpB,kBAAMS,cAAcF,OAE5B,CAACP,IDoCGG"}