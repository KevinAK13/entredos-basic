'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

function useInterval(callback, delay) {
  var savedCallback = React.useRef(); // Remember the latest callback.

  React__default.useEffect(function () {
    savedCallback.current = callback;
  }, [callback]); // Set up the interval.

  React__default.useEffect(function () {
    function tick() {
      if (typeof savedCallback.current === 'function') {
        savedCallback.current();
      }
    }

    if (delay !== null) {
      var id = setInterval(tick, delay);
      return function () {
        return clearInterval(id);
      };
    }
  }, [delay]);
}

function useTypingEffect(_ref) {
  var over = _ref.over,
      _ref$charSpeed = _ref.charSpeed,
      charSpeed = _ref$charSpeed === void 0 ? 100 : _ref$charSpeed,
      _ref$loop = _ref.loop,
      loop = _ref$loop === void 0 ? true : _ref$loop,
      _ref$delayEnd = _ref.delayEnd,
      delayEnd = _ref$delayEnd === void 0 ? 500 : _ref$delayEnd;
  var savedMessage = React__default.useRef(['']);
  var inWordIndex = React__default.useRef(0);
  var inArrayIndex = React__default.useRef(0);
  React__default.useEffect(function () {
    if (typeof over === 'string') {
      savedMessage.current = [over];
    } else if (Array.isArray(over)) {
      savedMessage.current = over.map(function (el) {
        return el.toString();
      });
    }
  }, [over]);

  var _React$useState = React__default.useState(savedMessage.current ? savedMessage.current[inArrayIndex.current][inWordIndex.current] : ''),
      display = _React$useState[0],
      setDisplay = _React$useState[1]; //Go to next


  useInterval(function () {
    if (inWordIndex.current <= savedMessage.current[inArrayIndex.current].length + delayEnd / charSpeed) {
      inWordIndex.current = inWordIndex.current + 1;
      setDisplay(savedMessage.current[inArrayIndex.current].slice(0, inWordIndex.current));
    } else {
      //Current word is finished
      if (inArrayIndex.current < savedMessage.current.length - 1) {
        inArrayIndex.current = inArrayIndex.current + 1;
      } else if (loop) {
        inArrayIndex.current = 0;
      }

      inWordIndex.current = 0;
    }
  }, charSpeed);
  return display;
}

exports.default = useTypingEffect;
//# sourceMappingURL=react-use-typing-effect.cjs.development.js.map
